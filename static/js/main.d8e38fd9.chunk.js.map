{"version":3,"sources":["images/einstein-1.jpg","images/einstein-2.jpg","images/einstein-3.jpg","images/einstein-4.jpg","images/einstein-5.jpg","images/relativity-formulae.svg","helpers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","images","original","einstein1","originals","einstein2","einstein3","einstein4","einstein5","require","uppy","ProgressBar","StatusBar","Uppy","robodog","App","URLSearchParams","window","location","search","get","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","font","fontSize","message","uploadImage","bind","assertThisInitialized","handleSelect","handleFont","displayImage","image","upload","console","log","pick","params","auth","key","steps",":original","robot","resized","use","result","height","imagemagick_stack","resize_strategy","width","zoom","watermarked","text","size","color","valign","align","x_offset","y_offset","then","bundle","successful","uploadURL","react_default","a","createElement","src","alt","e","preventDefault","selection","target","value","setState","_this2","className","logo","image_gallery_default","items","onClick","Form_default","Control","as","Button_default","variant","href","title","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d8e38fd9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/einstein-1.b0932b34.jpg\";","module.exports = __webpack_public_path__ + \"static/media/einstein-2.06653dbb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/einstein-3.61187d6c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/einstein-4.69c2f86a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/einstein-5.385d6f74.jpg\";","module.exports = __webpack_public_path__ + \"static/media/relativity-formulae.2384305a.svg\";","import einstein1 from './images/einstein-1.jpg';\nimport einstein2 from './images/einstein-2.jpg';\nimport einstein3 from './images/einstein-3.jpg';\nimport einstein4 from './images/einstein-4.jpg';\nimport einstein5 from './images/einstein-5.jpg';\n\nconst images = [\n    {\n      original: einstein1\n    },\n    {\n      originals: einstein2\n    },\n    {\n      original: einstein3\n    },\n    {\n      original: einstein4\n    },\n    {\n      original: einstein5\n    },\n  ];\n\nexport default images;","import React, { Component } from 'react';\nimport ImageGallery from 'react-image-gallery';\nimport images from './helpers.js';\nimport logo from './images/relativity-formulae.svg';\nimport '../node_modules/react-image-gallery/styles/css/image-gallery.css';\nimport './App.css';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nconst { ProgressBar, StatusBar } = require('@uppy/react');\nconst Uppy = require('@uppy/core');\nconst uppy = Uppy();\nconst robodog = require('@uppy/robodog');\n\nlet logo_url = new URLSearchParams(window.location.search).get();\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      font: 'Ubuntu',\n      fontSize: '12',\n      message: 'Default statement'\n    };\n    this.uploadImage = this.uploadImage.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleFont = this.handleFont.bind(this);\n    this.displayImage = this.displayImage.bind(this);\n  }\n\n  uploadImage(){\n    let image = uppy.upload('/einstein-1.jpg', ()=>console.log(image));\n    const resultPromise = robodog.pick({\n      params: {\n        auth: { key: 'ee723b70d56f11e8b7809f4882ea3f24' },\n      \"steps\": {\n        \":original\": {\n          \"robot\": \"/upload/handle\"\n        },\n        \"resized\": {\n          \"use\": [\n            \":original\"\n          ],\n          \"robot\": \"/image/resize\",\n          \"result\": false,\n          \"height\": 500,\n          \"imagemagick_stack\": \"v1.0.0\",\n          \"resize_strategy\": \"fit\",\n          \"width\": 500,\n          \"zoom\": false\n        },\n        \"watermarked\": {\n          \"use\": [\n            \"resized\"\n          ],\n          \"robot\": \"/image/resize\",\n          \"result\": true,\n          \"imagemagick_stack\": \"v1.0.0\",\n          \"text\": [\n            {\n              \"text\": this.state.message,\n              \"size\": 12,\n              \"font\": this.state.font,\n              \"color\": \"#eeeeee\",\n              \"valign\": \"bottom\",\n              \"align\": \"right\",\n              \"x_offset\": 16,\n              \"y_offset\": -10\n            }\n          ]\n        }\n      }\n    }\n    })\n    resultPromise.then((bundle) =>{\n      console.log(bundle.successful[0].uploadURL);\n      return (\n        <img src=\"http://tmp-eu-west-1.transloadit.com.s3-eu-west-1.amazonaws.com/15f060e0386811e99a7f97d0b7bfe016.png\" alt=\"new\" />\n      );\n    })\n  }\n\n  displayImage(){\n    console.log('Display image');\n  }\n\n  handleSelect(e){\n    e.preventDefault();\n    let selection = e.target.value;\n    this.setState({fontSize: selection});\n  }\n\n  handleFont(e){\n    e.preventDefault();\n    let selection = e.target.value;\n    this.setState({font: selection});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <h1>Choose Your Einstein</h1>\n        <ImageGallery items={images} onClick={e=> this.uploadImage(e.preventDefault())}/>\n        <Form>\n          Font\n          <Form.Control as=\"select\" onClick={(e)=> this.handleFont(e)}>\n            <option>Ubuntu</option>\n            <option>Arial</option>\n            <option>Comic Sans MS</option>\n          </Form.Control>\n          Font Size\n          <Form.Control as=\"select\" onClick={(e)=> this.handleSelect(e)}>\n            <option>Small</option>\n            <option>Medium</option>\n            <option>Large</option>\n          </Form.Control>\n          <Button variant=\"outline-primary\">Generate</Button>\n        </Form>\n\n        <div>Icons made by <a href=\"https://www.freepik.com/\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a> is licensed by <a href=\"http://creativecommons.org/licenses/by/3.0/\" title=\"Creative Commons BY 3.0\">CC 3.0 BY</a></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}